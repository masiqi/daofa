// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                      = new(Query)
	Admin                  *admin
	ImageOcrTask           *imageOcrTask
	KnowledgePoint         *knowledgePoint
	Question               *question
	QuestionKnowledgePoint *questionKnowledgePoint
	QuestionType           *questionType
	Subject                *subject
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	ImageOcrTask = &Q.ImageOcrTask
	KnowledgePoint = &Q.KnowledgePoint
	Question = &Q.Question
	QuestionKnowledgePoint = &Q.QuestionKnowledgePoint
	QuestionType = &Q.QuestionType
	Subject = &Q.Subject
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                     db,
		Admin:                  newAdmin(db, opts...),
		ImageOcrTask:           newImageOcrTask(db, opts...),
		KnowledgePoint:         newKnowledgePoint(db, opts...),
		Question:               newQuestion(db, opts...),
		QuestionKnowledgePoint: newQuestionKnowledgePoint(db, opts...),
		QuestionType:           newQuestionType(db, opts...),
		Subject:                newSubject(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin                  admin
	ImageOcrTask           imageOcrTask
	KnowledgePoint         knowledgePoint
	Question               question
	QuestionKnowledgePoint questionKnowledgePoint
	QuestionType           questionType
	Subject                subject
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Admin:                  q.Admin.clone(db),
		ImageOcrTask:           q.ImageOcrTask.clone(db),
		KnowledgePoint:         q.KnowledgePoint.clone(db),
		Question:               q.Question.clone(db),
		QuestionKnowledgePoint: q.QuestionKnowledgePoint.clone(db),
		QuestionType:           q.QuestionType.clone(db),
		Subject:                q.Subject.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Admin:                  q.Admin.replaceDB(db),
		ImageOcrTask:           q.ImageOcrTask.replaceDB(db),
		KnowledgePoint:         q.KnowledgePoint.replaceDB(db),
		Question:               q.Question.replaceDB(db),
		QuestionKnowledgePoint: q.QuestionKnowledgePoint.replaceDB(db),
		QuestionType:           q.QuestionType.replaceDB(db),
		Subject:                q.Subject.replaceDB(db),
	}
}

type queryCtx struct {
	Admin                  IAdminDo
	ImageOcrTask           IImageOcrTaskDo
	KnowledgePoint         IKnowledgePointDo
	Question               IQuestionDo
	QuestionKnowledgePoint IQuestionKnowledgePointDo
	QuestionType           IQuestionTypeDo
	Subject                ISubjectDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:                  q.Admin.WithContext(ctx),
		ImageOcrTask:           q.ImageOcrTask.WithContext(ctx),
		KnowledgePoint:         q.KnowledgePoint.WithContext(ctx),
		Question:               q.Question.WithContext(ctx),
		QuestionKnowledgePoint: q.QuestionKnowledgePoint.WithContext(ctx),
		QuestionType:           q.QuestionType.WithContext(ctx),
		Subject:                q.Subject.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
