// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"daofa/backend/model"
)

func newQuestionType(db *gorm.DB, opts ...gen.DOOption) questionType {
	_questionType := questionType{}

	_questionType.questionTypeDo.UseDB(db, opts...)
	_questionType.questionTypeDo.UseModel(&model.QuestionType{})

	tableName := _questionType.questionTypeDo.TableName()
	_questionType.ALL = field.NewAsterisk(tableName)
	_questionType.ID = field.NewInt32(tableName, "id")
	_questionType.Name = field.NewString(tableName, "name")
	_questionType.Description = field.NewString(tableName, "description")
	_questionType.CreatedAt = field.NewTime(tableName, "created_at")
	_questionType.UpdatedAt = field.NewTime(tableName, "updated_at")

	_questionType.fillFieldMap()

	return _questionType
}

type questionType struct {
	questionTypeDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (q questionType) Table(newTableName string) *questionType {
	q.questionTypeDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionType) As(alias string) *questionType {
	q.questionTypeDo.DO = *(q.questionTypeDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionType) updateTableName(table string) *questionType {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Name = field.NewString(table, "name")
	q.Description = field.NewString(table, "description")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")

	q.fillFieldMap()

	return q
}

func (q *questionType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionType) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["name"] = q.Name
	q.fieldMap["description"] = q.Description
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
}

func (q questionType) clone(db *gorm.DB) questionType {
	q.questionTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionType) replaceDB(db *gorm.DB) questionType {
	q.questionTypeDo.ReplaceDB(db)
	return q
}

type questionTypeDo struct{ gen.DO }

type IQuestionTypeDo interface {
	gen.SubQuery
	Debug() IQuestionTypeDo
	WithContext(ctx context.Context) IQuestionTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionTypeDo
	WriteDB() IQuestionTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionTypeDo
	Not(conds ...gen.Condition) IQuestionTypeDo
	Or(conds ...gen.Condition) IQuestionTypeDo
	Select(conds ...field.Expr) IQuestionTypeDo
	Where(conds ...gen.Condition) IQuestionTypeDo
	Order(conds ...field.Expr) IQuestionTypeDo
	Distinct(cols ...field.Expr) IQuestionTypeDo
	Omit(cols ...field.Expr) IQuestionTypeDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionTypeDo
	Group(cols ...field.Expr) IQuestionTypeDo
	Having(conds ...gen.Condition) IQuestionTypeDo
	Limit(limit int) IQuestionTypeDo
	Offset(offset int) IQuestionTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionTypeDo
	Unscoped() IQuestionTypeDo
	Create(values ...*model.QuestionType) error
	CreateInBatches(values []*model.QuestionType, batchSize int) error
	Save(values ...*model.QuestionType) error
	First() (*model.QuestionType, error)
	Take() (*model.QuestionType, error)
	Last() (*model.QuestionType, error)
	Find() ([]*model.QuestionType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionType, err error)
	FindInBatches(result *[]*model.QuestionType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionTypeDo
	Assign(attrs ...field.AssignExpr) IQuestionTypeDo
	Joins(fields ...field.RelationField) IQuestionTypeDo
	Preload(fields ...field.RelationField) IQuestionTypeDo
	FirstOrInit() (*model.QuestionType, error)
	FirstOrCreate() (*model.QuestionType, error)
	FindByPage(offset int, limit int) (result []*model.QuestionType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CreateQuestionType(name string, description *string) (err error)
	UpdateQuestionType(id int32, name string, description *string) (err error)
	DeleteQuestionType(id int32) (err error)
	ListQuestionTypesWithPagination(offset int, limit int) (result []*model.QuestionType, err error)
	CountQuestionTypes() (result int64, err error)
	GetQuestionTypeByID(id int32) (result *model.QuestionType, err error)
	SearchQuestionTypes(name string, offset int, limit int) (result []*model.QuestionType, err error)
	GetQuestionTypeByName(name string) (result *model.QuestionType, err error)
}

// INSERT INTO @@table (name, description) VALUES (@name, @description)
func (q questionTypeDo) CreateQuestionType(name string, description *string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	params = append(params, description)
	generateSQL.WriteString("INSERT INTO question_type (name, description) VALUES (?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET
//
//	{{if name != ""}}name=@name,{{end}}
//	{{if description != nil}}description=@description,{{end}}
//
// WHERE id=@id
func (q questionTypeDo) UpdateQuestionType(id int32, name string, description *string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE question_type SET ")
	if name != "" {
		params = append(params, name)
		generateSQL.WriteString("name=?, ")
	}
	if description != nil {
		params = append(params, description)
		generateSQL.WriteString("description=?, ")
	}
	params = append(params, id)
	generateSQL.WriteString("WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (q questionTypeDo) DeleteQuestionType(id int32) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM question_type WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table LIMIT @limit OFFSET @offset
func (q questionTypeDo) ListQuestionTypesWithPagination(offset int, limit int) (result []*model.QuestionType, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM question_type LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT COUNT(*) FROM @@table
func (q questionTypeDo) CountQuestionTypes() (result int64, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(*) FROM question_type ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id=@id LIMIT 1
func (q questionTypeDo) GetQuestionTypeByID(id int32) (result *model.QuestionType, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM question_type WHERE id=? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
//
//	{{where}}
//	  {{if name != ""}}name LIKE CONCAT('%', @name, '%'){{end}}
//	{{end}}
//
// LIMIT @limit OFFSET @offset
func (q questionTypeDo) SearchQuestionTypes(name string, offset int, limit int) (result []*model.QuestionType, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM question_type ")
	var whereSQL0 strings.Builder
	if name != "" {
		params = append(params, name)
		whereSQL0.WriteString("name LIKE CONCAT('%', ?, '%') ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name = @name LIMIT 1
func (q questionTypeDo) GetQuestionTypeByName(name string) (result *model.QuestionType, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM question_type WHERE name = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (q questionTypeDo) Debug() IQuestionTypeDo {
	return q.withDO(q.DO.Debug())
}

func (q questionTypeDo) WithContext(ctx context.Context) IQuestionTypeDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionTypeDo) ReadDB() IQuestionTypeDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionTypeDo) WriteDB() IQuestionTypeDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionTypeDo) Session(config *gorm.Session) IQuestionTypeDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionTypeDo) Clauses(conds ...clause.Expression) IQuestionTypeDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionTypeDo) Returning(value interface{}, columns ...string) IQuestionTypeDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionTypeDo) Not(conds ...gen.Condition) IQuestionTypeDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionTypeDo) Or(conds ...gen.Condition) IQuestionTypeDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionTypeDo) Select(conds ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionTypeDo) Where(conds ...gen.Condition) IQuestionTypeDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionTypeDo) Order(conds ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionTypeDo) Distinct(cols ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionTypeDo) Omit(cols ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionTypeDo) Join(table schema.Tabler, on ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionTypeDo) Group(cols ...field.Expr) IQuestionTypeDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionTypeDo) Having(conds ...gen.Condition) IQuestionTypeDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionTypeDo) Limit(limit int) IQuestionTypeDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionTypeDo) Offset(offset int) IQuestionTypeDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionTypeDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionTypeDo) Unscoped() IQuestionTypeDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionTypeDo) Create(values ...*model.QuestionType) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionTypeDo) CreateInBatches(values []*model.QuestionType, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionTypeDo) Save(values ...*model.QuestionType) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionTypeDo) First() (*model.QuestionType, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionType), nil
	}
}

func (q questionTypeDo) Take() (*model.QuestionType, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionType), nil
	}
}

func (q questionTypeDo) Last() (*model.QuestionType, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionType), nil
	}
}

func (q questionTypeDo) Find() ([]*model.QuestionType, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionType), err
}

func (q questionTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionType, err error) {
	buf := make([]*model.QuestionType, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionTypeDo) FindInBatches(result *[]*model.QuestionType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionTypeDo) Attrs(attrs ...field.AssignExpr) IQuestionTypeDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionTypeDo) Assign(attrs ...field.AssignExpr) IQuestionTypeDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionTypeDo) Joins(fields ...field.RelationField) IQuestionTypeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionTypeDo) Preload(fields ...field.RelationField) IQuestionTypeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionTypeDo) FirstOrInit() (*model.QuestionType, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionType), nil
	}
}

func (q questionTypeDo) FirstOrCreate() (*model.QuestionType, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionType), nil
	}
}

func (q questionTypeDo) FindByPage(offset int, limit int) (result []*model.QuestionType, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionTypeDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionTypeDo) Delete(models ...*model.QuestionType) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionTypeDo) withDO(do gen.Dao) *questionTypeDo {
	q.DO = *do.(*gen.DO)
	return q
}
