// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"daofa/backend/model"
)

func newKnowledgePoint(db *gorm.DB, opts ...gen.DOOption) knowledgePoint {
	_knowledgePoint := knowledgePoint{}

	_knowledgePoint.knowledgePointDo.UseDB(db, opts...)
	_knowledgePoint.knowledgePointDo.UseModel(&model.KnowledgePoint{})

	tableName := _knowledgePoint.knowledgePointDo.TableName()
	_knowledgePoint.ALL = field.NewAsterisk(tableName)
	_knowledgePoint.ID = field.NewInt32(tableName, "id")
	_knowledgePoint.SubjectID = field.NewInt32(tableName, "subject_id")
	_knowledgePoint.ParentID = field.NewInt32(tableName, "parent_id")
	_knowledgePoint.Name = field.NewString(tableName, "name")
	_knowledgePoint.Description = field.NewString(tableName, "description")
	_knowledgePoint.IsLeaf = field.NewBool(tableName, "is_leaf")
	_knowledgePoint.CreatedAt = field.NewTime(tableName, "created_at")
	_knowledgePoint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_knowledgePoint.Subject = knowledgePointBelongsToSubject{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Subject", "model.Subject"),
	}

	_knowledgePoint.Children = knowledgePointHasManyChildren{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Children", "model.KnowledgePoint"),
	}

	_knowledgePoint.Parent = knowledgePointBelongsToParent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Parent", "model.KnowledgePoint"),
	}

	_knowledgePoint.fillFieldMap()

	return _knowledgePoint
}

type knowledgePoint struct {
	knowledgePointDo

	ALL         field.Asterisk
	ID          field.Int32
	SubjectID   field.Int32
	ParentID    field.Int32
	Name        field.String
	Description field.String
	IsLeaf      field.Bool
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Subject     knowledgePointBelongsToSubject

	Children knowledgePointHasManyChildren

	Parent knowledgePointBelongsToParent

	fieldMap map[string]field.Expr
}

func (k knowledgePoint) Table(newTableName string) *knowledgePoint {
	k.knowledgePointDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k knowledgePoint) As(alias string) *knowledgePoint {
	k.knowledgePointDo.DO = *(k.knowledgePointDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *knowledgePoint) updateTableName(table string) *knowledgePoint {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt32(table, "id")
	k.SubjectID = field.NewInt32(table, "subject_id")
	k.ParentID = field.NewInt32(table, "parent_id")
	k.Name = field.NewString(table, "name")
	k.Description = field.NewString(table, "description")
	k.IsLeaf = field.NewBool(table, "is_leaf")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")

	k.fillFieldMap()

	return k
}

func (k *knowledgePoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *knowledgePoint) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 11)
	k.fieldMap["id"] = k.ID
	k.fieldMap["subject_id"] = k.SubjectID
	k.fieldMap["parent_id"] = k.ParentID
	k.fieldMap["name"] = k.Name
	k.fieldMap["description"] = k.Description
	k.fieldMap["is_leaf"] = k.IsLeaf
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt

}

func (k knowledgePoint) clone(db *gorm.DB) knowledgePoint {
	k.knowledgePointDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k knowledgePoint) replaceDB(db *gorm.DB) knowledgePoint {
	k.knowledgePointDo.ReplaceDB(db)
	return k
}

type knowledgePointBelongsToSubject struct {
	db *gorm.DB

	field.RelationField
}

func (a knowledgePointBelongsToSubject) Where(conds ...field.Expr) *knowledgePointBelongsToSubject {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a knowledgePointBelongsToSubject) WithContext(ctx context.Context) *knowledgePointBelongsToSubject {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a knowledgePointBelongsToSubject) Session(session *gorm.Session) *knowledgePointBelongsToSubject {
	a.db = a.db.Session(session)
	return &a
}

func (a knowledgePointBelongsToSubject) Model(m *model.KnowledgePoint) *knowledgePointBelongsToSubjectTx {
	return &knowledgePointBelongsToSubjectTx{a.db.Model(m).Association(a.Name())}
}

type knowledgePointBelongsToSubjectTx struct{ tx *gorm.Association }

func (a knowledgePointBelongsToSubjectTx) Find() (result *model.Subject, err error) {
	return result, a.tx.Find(&result)
}

func (a knowledgePointBelongsToSubjectTx) Append(values ...*model.Subject) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a knowledgePointBelongsToSubjectTx) Replace(values ...*model.Subject) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a knowledgePointBelongsToSubjectTx) Delete(values ...*model.Subject) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a knowledgePointBelongsToSubjectTx) Clear() error {
	return a.tx.Clear()
}

func (a knowledgePointBelongsToSubjectTx) Count() int64 {
	return a.tx.Count()
}

type knowledgePointHasManyChildren struct {
	db *gorm.DB

	field.RelationField
}

func (a knowledgePointHasManyChildren) Where(conds ...field.Expr) *knowledgePointHasManyChildren {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a knowledgePointHasManyChildren) WithContext(ctx context.Context) *knowledgePointHasManyChildren {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a knowledgePointHasManyChildren) Session(session *gorm.Session) *knowledgePointHasManyChildren {
	a.db = a.db.Session(session)
	return &a
}

func (a knowledgePointHasManyChildren) Model(m *model.KnowledgePoint) *knowledgePointHasManyChildrenTx {
	return &knowledgePointHasManyChildrenTx{a.db.Model(m).Association(a.Name())}
}

type knowledgePointHasManyChildrenTx struct{ tx *gorm.Association }

func (a knowledgePointHasManyChildrenTx) Find() (result []*model.KnowledgePoint, err error) {
	return result, a.tx.Find(&result)
}

func (a knowledgePointHasManyChildrenTx) Append(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a knowledgePointHasManyChildrenTx) Replace(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a knowledgePointHasManyChildrenTx) Delete(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a knowledgePointHasManyChildrenTx) Clear() error {
	return a.tx.Clear()
}

func (a knowledgePointHasManyChildrenTx) Count() int64 {
	return a.tx.Count()
}

type knowledgePointBelongsToParent struct {
	db *gorm.DB

	field.RelationField
}

func (a knowledgePointBelongsToParent) Where(conds ...field.Expr) *knowledgePointBelongsToParent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a knowledgePointBelongsToParent) WithContext(ctx context.Context) *knowledgePointBelongsToParent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a knowledgePointBelongsToParent) Session(session *gorm.Session) *knowledgePointBelongsToParent {
	a.db = a.db.Session(session)
	return &a
}

func (a knowledgePointBelongsToParent) Model(m *model.KnowledgePoint) *knowledgePointBelongsToParentTx {
	return &knowledgePointBelongsToParentTx{a.db.Model(m).Association(a.Name())}
}

type knowledgePointBelongsToParentTx struct{ tx *gorm.Association }

func (a knowledgePointBelongsToParentTx) Find() (result *model.KnowledgePoint, err error) {
	return result, a.tx.Find(&result)
}

func (a knowledgePointBelongsToParentTx) Append(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a knowledgePointBelongsToParentTx) Replace(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a knowledgePointBelongsToParentTx) Delete(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a knowledgePointBelongsToParentTx) Clear() error {
	return a.tx.Clear()
}

func (a knowledgePointBelongsToParentTx) Count() int64 {
	return a.tx.Count()
}

type knowledgePointDo struct{ gen.DO }

type IKnowledgePointDo interface {
	gen.SubQuery
	Debug() IKnowledgePointDo
	WithContext(ctx context.Context) IKnowledgePointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKnowledgePointDo
	WriteDB() IKnowledgePointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKnowledgePointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKnowledgePointDo
	Not(conds ...gen.Condition) IKnowledgePointDo
	Or(conds ...gen.Condition) IKnowledgePointDo
	Select(conds ...field.Expr) IKnowledgePointDo
	Where(conds ...gen.Condition) IKnowledgePointDo
	Order(conds ...field.Expr) IKnowledgePointDo
	Distinct(cols ...field.Expr) IKnowledgePointDo
	Omit(cols ...field.Expr) IKnowledgePointDo
	Join(table schema.Tabler, on ...field.Expr) IKnowledgePointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgePointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgePointDo
	Group(cols ...field.Expr) IKnowledgePointDo
	Having(conds ...gen.Condition) IKnowledgePointDo
	Limit(limit int) IKnowledgePointDo
	Offset(offset int) IKnowledgePointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgePointDo
	Unscoped() IKnowledgePointDo
	Create(values ...*model.KnowledgePoint) error
	CreateInBatches(values []*model.KnowledgePoint, batchSize int) error
	Save(values ...*model.KnowledgePoint) error
	First() (*model.KnowledgePoint, error)
	Take() (*model.KnowledgePoint, error)
	Last() (*model.KnowledgePoint, error)
	Find() ([]*model.KnowledgePoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KnowledgePoint, err error)
	FindInBatches(result *[]*model.KnowledgePoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.KnowledgePoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKnowledgePointDo
	Assign(attrs ...field.AssignExpr) IKnowledgePointDo
	Joins(fields ...field.RelationField) IKnowledgePointDo
	Preload(fields ...field.RelationField) IKnowledgePointDo
	FirstOrInit() (*model.KnowledgePoint, error)
	FirstOrCreate() (*model.KnowledgePoint, error)
	FindByPage(offset int, limit int) (result []*model.KnowledgePoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKnowledgePointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetKnowledgePointByID(id int32) (result *model.KnowledgePoint, err error)
	ListKnowledgePointsBySubject(subjectID int32, offset int, limit int) (result []*model.KnowledgePoint, err error)
	GetChildKnowledgePoints(parentID int32) (result []*model.KnowledgePoint, err error)
	GetRootKnowledgePoints(subjectID int32) (result []*model.KnowledgePoint, err error)
	SearchKnowledgePoints(subjectID int32, parentID *int32, name string, isLeaf *bool, offset int, limit int) (result []*model.KnowledgePoint, err error)
	CountKnowledgePoints(subjectID int32, parentID *int32, name string, isLeaf *bool) (result int64, err error)
	ListKnowledgePointsWithPagination(offset int, limit int) (result []*model.KnowledgePoint, err error)
	CreateKnowledgePoint(subjectID int32, parentID *int32, name string, description *string, isLeaf bool) (err error)
	UpdateKnowledgePoint(id int32, subjectID int32, parentID *int32, name string, description *string, isLeaf *bool) (err error)
	DeleteKnowledgePoint(id int32) (err error)
	GetKnowledgePointByName(name string) (result *model.KnowledgePoint, err error)
	GetKnowledgePointByNameAndSubject(name string, subjectID int32) (result *model.KnowledgePoint, err error)
	CreateKnowledgePointWithSubject(subjectID int32, parentID *int32, name string, description *string, isLeaf bool) (err error)
}

// SELECT * FROM @@table WHERE id=@id LIMIT 1
func (k knowledgePointDo) GetKnowledgePointByID(id int32) (result *model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE id=? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE subject_id=@subjectID ORDER BY id LIMIT @limit OFFSET @offset
func (k knowledgePointDo) ListKnowledgePointsBySubject(subjectID int32, offset int, limit int) (result []*model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, subjectID)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE subject_id=? ORDER BY id LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE parent_id=@parentID ORDER BY id
func (k knowledgePointDo) GetChildKnowledgePoints(parentID int32) (result []*model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, parentID)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE parent_id=? ORDER BY id ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE subject_id=@subjectID AND parent_id IS NULL ORDER BY id
func (k knowledgePointDo) GetRootKnowledgePoints(subjectID int32) (result []*model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, subjectID)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE subject_id=? AND parent_id IS NULL ORDER BY id ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
//
//	{{where}}
//	  {{if subjectID != 0}}subject_id=@subjectID{{end}}
//	  {{if parentID != nil}}AND parent_id=@parentID{{end}}
//	  {{if name != ""}}AND name LIKE CONCAT('%', @name, '%'){{end}}
//	  {{if isLeaf != nil}}AND is_leaf=@isLeaf{{end}}
//	{{end}}
//
// ORDER BY id LIMIT @limit OFFSET @offset
func (k knowledgePointDo) SearchKnowledgePoints(subjectID int32, parentID *int32, name string, isLeaf *bool, offset int, limit int) (result []*model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM knowledge_point ")
	var whereSQL0 strings.Builder
	if subjectID != 0 {
		params = append(params, subjectID)
		whereSQL0.WriteString("subject_id=? ")
	}
	if parentID != nil {
		params = append(params, parentID)
		whereSQL0.WriteString("AND parent_id=? ")
	}
	if name != "" {
		params = append(params, name)
		whereSQL0.WriteString("AND name LIKE CONCAT('%', ?, '%') ")
	}
	if isLeaf != nil {
		params = append(params, isLeaf)
		whereSQL0.WriteString("AND is_leaf=? ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY id LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT COUNT(*) FROM @@table
//
//	{{where}}
//	  {{if subjectID != 0}}subject_id=@subjectID{{end}}
//	  {{if parentID != nil}}AND parent_id=@parentID{{end}}
//	  {{if name != ""}}AND name LIKE CONCAT('%', @name, '%'){{end}}
//	  {{if isLeaf != nil}}AND is_leaf=@isLeaf{{end}}
//	{{end}}
func (k knowledgePointDo) CountKnowledgePoints(subjectID int32, parentID *int32, name string, isLeaf *bool) (result int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(*) FROM knowledge_point ")
	var whereSQL0 strings.Builder
	if subjectID != 0 {
		params = append(params, subjectID)
		whereSQL0.WriteString("subject_id=? ")
	}
	if parentID != nil {
		params = append(params, parentID)
		whereSQL0.WriteString("AND parent_id=? ")
	}
	if name != "" {
		params = append(params, name)
		whereSQL0.WriteString("AND name LIKE CONCAT('%', ?, '%') ")
	}
	if isLeaf != nil {
		params = append(params, isLeaf)
		whereSQL0.WriteString("AND is_leaf=? ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table ORDER BY id LIMIT @limit OFFSET @offset
func (k knowledgePointDo) ListKnowledgePointsWithPagination(offset int, limit int) (result []*model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM knowledge_point ORDER BY id LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (subject_id, parent_id, name, description, is_leaf )
// VALUES (@subjectID, @parentID, @name, @description, @isLeaf )
func (k knowledgePointDo) CreateKnowledgePoint(subjectID int32, parentID *int32, name string, description *string, isLeaf bool) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, subjectID)
	params = append(params, parentID)
	params = append(params, name)
	params = append(params, description)
	params = append(params, isLeaf)
	generateSQL.WriteString("INSERT INTO knowledge_point (subject_id, parent_id, name, description, is_leaf ) VALUES (?, ?, ?, ?, ? ) ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET
//
//	{{if subjectID != 0}}subject_id=@subjectID,{{end}}
//	{{if parentID != nil}}parent_id=@parentID,{{end}}
//	{{if name != ""}}name=@name,{{end}}
//	{{if description != nil}}description=@description,{{end}}
//	{{if isLeaf != nil}}is_leaf=@isLeaf,{{end}}
//
// WHERE id=@id
func (k knowledgePointDo) UpdateKnowledgePoint(id int32, subjectID int32, parentID *int32, name string, description *string, isLeaf *bool) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE knowledge_point SET ")
	if subjectID != 0 {
		params = append(params, subjectID)
		generateSQL.WriteString("subject_id=?, ")
	}
	if parentID != nil {
		params = append(params, parentID)
		generateSQL.WriteString("parent_id=?, ")
	}
	if name != "" {
		params = append(params, name)
		generateSQL.WriteString("name=?, ")
	}
	if description != nil {
		params = append(params, description)
		generateSQL.WriteString("description=?, ")
	}
	if isLeaf != nil {
		params = append(params, isLeaf)
		generateSQL.WriteString("is_leaf=?, ")
	}
	params = append(params, id)
	generateSQL.WriteString("WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (k knowledgePointDo) DeleteKnowledgePoint(id int32) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM knowledge_point WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name = @name LIMIT 1
func (k knowledgePointDo) GetKnowledgePointByName(name string) (result *model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE name = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE subject_id = @subjectID AND name = @name LIMIT 1
func (k knowledgePointDo) GetKnowledgePointByNameAndSubject(name string, subjectID int32) (result *model.KnowledgePoint, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, subjectID)
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM knowledge_point WHERE subject_id = ? AND name = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (subject_id, parent_id, name, description, is_leaf)
// VALUES (@subjectID, @parentID, @name, @description, @isLeaf)
func (k knowledgePointDo) CreateKnowledgePointWithSubject(subjectID int32, parentID *int32, name string, description *string, isLeaf bool) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, subjectID)
	params = append(params, parentID)
	params = append(params, name)
	params = append(params, description)
	params = append(params, isLeaf)
	generateSQL.WriteString("INSERT INTO knowledge_point (subject_id, parent_id, name, description, is_leaf) VALUES (?, ?, ?, ?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = k.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (k knowledgePointDo) Debug() IKnowledgePointDo {
	return k.withDO(k.DO.Debug())
}

func (k knowledgePointDo) WithContext(ctx context.Context) IKnowledgePointDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k knowledgePointDo) ReadDB() IKnowledgePointDo {
	return k.Clauses(dbresolver.Read)
}

func (k knowledgePointDo) WriteDB() IKnowledgePointDo {
	return k.Clauses(dbresolver.Write)
}

func (k knowledgePointDo) Session(config *gorm.Session) IKnowledgePointDo {
	return k.withDO(k.DO.Session(config))
}

func (k knowledgePointDo) Clauses(conds ...clause.Expression) IKnowledgePointDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k knowledgePointDo) Returning(value interface{}, columns ...string) IKnowledgePointDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k knowledgePointDo) Not(conds ...gen.Condition) IKnowledgePointDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k knowledgePointDo) Or(conds ...gen.Condition) IKnowledgePointDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k knowledgePointDo) Select(conds ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k knowledgePointDo) Where(conds ...gen.Condition) IKnowledgePointDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k knowledgePointDo) Order(conds ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k knowledgePointDo) Distinct(cols ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k knowledgePointDo) Omit(cols ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k knowledgePointDo) Join(table schema.Tabler, on ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k knowledgePointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k knowledgePointDo) RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k knowledgePointDo) Group(cols ...field.Expr) IKnowledgePointDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k knowledgePointDo) Having(conds ...gen.Condition) IKnowledgePointDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k knowledgePointDo) Limit(limit int) IKnowledgePointDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k knowledgePointDo) Offset(offset int) IKnowledgePointDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k knowledgePointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgePointDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k knowledgePointDo) Unscoped() IKnowledgePointDo {
	return k.withDO(k.DO.Unscoped())
}

func (k knowledgePointDo) Create(values ...*model.KnowledgePoint) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k knowledgePointDo) CreateInBatches(values []*model.KnowledgePoint, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k knowledgePointDo) Save(values ...*model.KnowledgePoint) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k knowledgePointDo) First() (*model.KnowledgePoint, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KnowledgePoint), nil
	}
}

func (k knowledgePointDo) Take() (*model.KnowledgePoint, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KnowledgePoint), nil
	}
}

func (k knowledgePointDo) Last() (*model.KnowledgePoint, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KnowledgePoint), nil
	}
}

func (k knowledgePointDo) Find() ([]*model.KnowledgePoint, error) {
	result, err := k.DO.Find()
	return result.([]*model.KnowledgePoint), err
}

func (k knowledgePointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KnowledgePoint, err error) {
	buf := make([]*model.KnowledgePoint, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k knowledgePointDo) FindInBatches(result *[]*model.KnowledgePoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k knowledgePointDo) Attrs(attrs ...field.AssignExpr) IKnowledgePointDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k knowledgePointDo) Assign(attrs ...field.AssignExpr) IKnowledgePointDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k knowledgePointDo) Joins(fields ...field.RelationField) IKnowledgePointDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k knowledgePointDo) Preload(fields ...field.RelationField) IKnowledgePointDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k knowledgePointDo) FirstOrInit() (*model.KnowledgePoint, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KnowledgePoint), nil
	}
}

func (k knowledgePointDo) FirstOrCreate() (*model.KnowledgePoint, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KnowledgePoint), nil
	}
}

func (k knowledgePointDo) FindByPage(offset int, limit int) (result []*model.KnowledgePoint, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k knowledgePointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k knowledgePointDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k knowledgePointDo) Delete(models ...*model.KnowledgePoint) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *knowledgePointDo) withDO(do gen.Dao) *knowledgePointDo {
	k.DO = *do.(*gen.DO)
	return k
}
