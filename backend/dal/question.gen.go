// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"daofa/backend/model"
)

func newQuestion(db *gorm.DB, opts ...gen.DOOption) question {
	_question := question{}

	_question.questionDo.UseDB(db, opts...)
	_question.questionDo.UseModel(&model.Question{})

	tableName := _question.questionDo.TableName()
	_question.ALL = field.NewAsterisk(tableName)
	_question.ID = field.NewInt32(tableName, "id")
	_question.Content = field.NewString(tableName, "content")
	_question.ImagePath = field.NewString(tableName, "image_path")
	_question.OcrText = field.NewString(tableName, "ocr_text")
	_question.Answer = field.NewString(tableName, "answer")
	_question.Explanation = field.NewString(tableName, "explanation")
	_question.TypeID = field.NewInt32(tableName, "type_id")
	_question.Hash = field.NewString(tableName, "hash")
	_question.CreatedAt = field.NewTime(tableName, "created_at")
	_question.UpdatedAt = field.NewTime(tableName, "updated_at")
	_question.QuestionType = questionBelongsToQuestionType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("QuestionType", "model.QuestionType"),
	}

	_question.KnowledgePoints = questionManyToManyKnowledgePoints{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("KnowledgePoints", "model.KnowledgePoint"),
		Subject: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("KnowledgePoints.Subject", "model.Subject"),
		},
		Children: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("KnowledgePoints.Children", "model.KnowledgePoint"),
		},
		Parent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("KnowledgePoints.Parent", "model.KnowledgePoint"),
		},
	}

	_question.fillFieldMap()

	return _question
}

type question struct {
	questionDo

	ALL          field.Asterisk
	ID           field.Int32
	Content      field.String
	ImagePath    field.String
	OcrText      field.String
	Answer       field.String
	Explanation  field.String
	TypeID       field.Int32
	Hash         field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	QuestionType questionBelongsToQuestionType

	KnowledgePoints questionManyToManyKnowledgePoints

	fieldMap map[string]field.Expr
}

func (q question) Table(newTableName string) *question {
	q.questionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q question) As(alias string) *question {
	q.questionDo.DO = *(q.questionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *question) updateTableName(table string) *question {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Content = field.NewString(table, "content")
	q.ImagePath = field.NewString(table, "image_path")
	q.OcrText = field.NewString(table, "ocr_text")
	q.Answer = field.NewString(table, "answer")
	q.Explanation = field.NewString(table, "explanation")
	q.TypeID = field.NewInt32(table, "type_id")
	q.Hash = field.NewString(table, "hash")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")

	q.fillFieldMap()

	return q
}

func (q *question) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *question) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["content"] = q.Content
	q.fieldMap["image_path"] = q.ImagePath
	q.fieldMap["ocr_text"] = q.OcrText
	q.fieldMap["answer"] = q.Answer
	q.fieldMap["explanation"] = q.Explanation
	q.fieldMap["type_id"] = q.TypeID
	q.fieldMap["hash"] = q.Hash
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt

}

func (q question) clone(db *gorm.DB) question {
	q.questionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q question) replaceDB(db *gorm.DB) question {
	q.questionDo.ReplaceDB(db)
	return q
}

type questionBelongsToQuestionType struct {
	db *gorm.DB

	field.RelationField
}

func (a questionBelongsToQuestionType) Where(conds ...field.Expr) *questionBelongsToQuestionType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a questionBelongsToQuestionType) WithContext(ctx context.Context) *questionBelongsToQuestionType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a questionBelongsToQuestionType) Session(session *gorm.Session) *questionBelongsToQuestionType {
	a.db = a.db.Session(session)
	return &a
}

func (a questionBelongsToQuestionType) Model(m *model.Question) *questionBelongsToQuestionTypeTx {
	return &questionBelongsToQuestionTypeTx{a.db.Model(m).Association(a.Name())}
}

type questionBelongsToQuestionTypeTx struct{ tx *gorm.Association }

func (a questionBelongsToQuestionTypeTx) Find() (result *model.QuestionType, err error) {
	return result, a.tx.Find(&result)
}

func (a questionBelongsToQuestionTypeTx) Append(values ...*model.QuestionType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a questionBelongsToQuestionTypeTx) Replace(values ...*model.QuestionType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a questionBelongsToQuestionTypeTx) Delete(values ...*model.QuestionType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a questionBelongsToQuestionTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a questionBelongsToQuestionTypeTx) Count() int64 {
	return a.tx.Count()
}

type questionManyToManyKnowledgePoints struct {
	db *gorm.DB

	field.RelationField

	Subject struct {
		field.RelationField
	}
	Children struct {
		field.RelationField
	}
	Parent struct {
		field.RelationField
	}
}

func (a questionManyToManyKnowledgePoints) Where(conds ...field.Expr) *questionManyToManyKnowledgePoints {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a questionManyToManyKnowledgePoints) WithContext(ctx context.Context) *questionManyToManyKnowledgePoints {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a questionManyToManyKnowledgePoints) Session(session *gorm.Session) *questionManyToManyKnowledgePoints {
	a.db = a.db.Session(session)
	return &a
}

func (a questionManyToManyKnowledgePoints) Model(m *model.Question) *questionManyToManyKnowledgePointsTx {
	return &questionManyToManyKnowledgePointsTx{a.db.Model(m).Association(a.Name())}
}

type questionManyToManyKnowledgePointsTx struct{ tx *gorm.Association }

func (a questionManyToManyKnowledgePointsTx) Find() (result []*model.KnowledgePoint, err error) {
	return result, a.tx.Find(&result)
}

func (a questionManyToManyKnowledgePointsTx) Append(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a questionManyToManyKnowledgePointsTx) Replace(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a questionManyToManyKnowledgePointsTx) Delete(values ...*model.KnowledgePoint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a questionManyToManyKnowledgePointsTx) Clear() error {
	return a.tx.Clear()
}

func (a questionManyToManyKnowledgePointsTx) Count() int64 {
	return a.tx.Count()
}

type questionDo struct{ gen.DO }

type IQuestionDo interface {
	gen.SubQuery
	Debug() IQuestionDo
	WithContext(ctx context.Context) IQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionDo
	WriteDB() IQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionDo
	Not(conds ...gen.Condition) IQuestionDo
	Or(conds ...gen.Condition) IQuestionDo
	Select(conds ...field.Expr) IQuestionDo
	Where(conds ...gen.Condition) IQuestionDo
	Order(conds ...field.Expr) IQuestionDo
	Distinct(cols ...field.Expr) IQuestionDo
	Omit(cols ...field.Expr) IQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionDo
	Group(cols ...field.Expr) IQuestionDo
	Having(conds ...gen.Condition) IQuestionDo
	Limit(limit int) IQuestionDo
	Offset(offset int) IQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionDo
	Unscoped() IQuestionDo
	Create(values ...*model.Question) error
	CreateInBatches(values []*model.Question, batchSize int) error
	Save(values ...*model.Question) error
	First() (*model.Question, error)
	Take() (*model.Question, error)
	Last() (*model.Question, error)
	Find() ([]*model.Question, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Question, err error)
	FindInBatches(result *[]*model.Question, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Question) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionDo
	Assign(attrs ...field.AssignExpr) IQuestionDo
	Joins(fields ...field.RelationField) IQuestionDo
	Preload(fields ...field.RelationField) IQuestionDo
	FirstOrInit() (*model.Question, error)
	FirstOrCreate() (*model.Question, error)
	FindByPage(offset int, limit int) (result []*model.Question, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CreateQuestion(content string, imagePath *string, ocrText *string, answer string, explanation *string, typeID int32, hash string) (err error)
	UpdateQuestion(id int32, content string, imagePath *string, ocrText *string, answer string, explanation *string, typeID int32, hash string) (err error)
	DeleteQuestion(id int32) (err error)
	ListQuestionsWithPagination(offset int, limit int) (result []*model.Question, err error)
	CountQuestions() (result int64, err error)
	GetQuestionByID(id int32) (result *model.Question, err error)
	GetQuestionByHash(hash string) (result *model.Question, err error)
	SearchQuestions(content string, typeID int32, offset int, limit int) (result []*model.Question, err error)
	GetQuestionsByIDRange(startID int, endID int) (result []*model.Question, err error)
}

// INSERT INTO @@table (content, image_path, ocr_text, answer, explanation, type_id, hash)
// VALUES (@content, @imagePath, @ocrText, @answer, @explanation, @typeID, @hash)
func (q questionDo) CreateQuestion(content string, imagePath *string, ocrText *string, answer string, explanation *string, typeID int32, hash string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, content)
	params = append(params, imagePath)
	params = append(params, ocrText)
	params = append(params, answer)
	params = append(params, explanation)
	params = append(params, typeID)
	params = append(params, hash)
	generateSQL.WriteString("INSERT INTO question (content, image_path, ocr_text, answer, explanation, type_id, hash) VALUES (?, ?, ?, ?, ?, ?, ?) ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET
//
//	{{if content != ""}}content=@content,{{end}}
//	{{if imagePath != nil}}image_path=@imagePath,{{end}}
//	{{if ocrText != nil}}ocr_text=@ocrText,{{end}}
//	{{if answer != ""}}answer=@answer,{{end}}
//	{{if explanation != nil}}explanation=@explanation,{{end}}
//	{{if typeID != 0}}type_id=@typeID,{{end}}
//	{{if hash != ""}}hash=@hash{{end}}
//
// WHERE id=@id
func (q questionDo) UpdateQuestion(id int32, content string, imagePath *string, ocrText *string, answer string, explanation *string, typeID int32, hash string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE question SET ")
	if content != "" {
		params = append(params, content)
		generateSQL.WriteString("content=?, ")
	}
	if imagePath != nil {
		params = append(params, imagePath)
		generateSQL.WriteString("image_path=?, ")
	}
	if ocrText != nil {
		params = append(params, ocrText)
		generateSQL.WriteString("ocr_text=?, ")
	}
	if answer != "" {
		params = append(params, answer)
		generateSQL.WriteString("answer=?, ")
	}
	if explanation != nil {
		params = append(params, explanation)
		generateSQL.WriteString("explanation=?, ")
	}
	if typeID != 0 {
		params = append(params, typeID)
		generateSQL.WriteString("type_id=?, ")
	}
	if hash != "" {
		params = append(params, hash)
		generateSQL.WriteString("hash=? ")
	}
	params = append(params, id)
	generateSQL.WriteString("WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table WHERE id=@id
func (q questionDo) DeleteQuestion(id int32) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("DELETE FROM question WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table LIMIT @limit OFFSET @offset
func (q questionDo) ListQuestionsWithPagination(offset int, limit int) (result []*model.Question, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("SELECT * FROM question LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT COUNT(*) FROM @@table
func (q questionDo) CountQuestions() (result int64, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(*) FROM question ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id=@id LIMIT 1
func (q questionDo) GetQuestionByID(id int32) (result *model.Question, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM question WHERE id=? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE hash=@hash LIMIT 1
func (q questionDo) GetQuestionByHash(hash string) (result *model.Question, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, hash)
	generateSQL.WriteString("SELECT * FROM question WHERE hash=? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
//
//	{{where}}
//	  {{if content != ""}}content LIKE CONCAT('%', @content, '%'){{end}}
//	  {{if typeID != 0}}AND type_id = @typeID{{end}}
//	{{end}}
//
// ORDER BY id DESC
// LIMIT @limit OFFSET @offset
func (q questionDo) SearchQuestions(content string, typeID int32, offset int, limit int) (result []*model.Question, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM question ")
	var whereSQL0 strings.Builder
	if content != "" {
		params = append(params, content)
		whereSQL0.WriteString("content LIKE CONCAT('%', ?, '%') ")
	}
	if typeID != 0 {
		params = append(params, typeID)
		whereSQL0.WriteString("AND type_id = ? ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("ORDER BY id DESC LIMIT ? OFFSET ? ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id BETWEEN @startID AND @endID ORDER BY id
func (q questionDo) GetQuestionsByIDRange(startID int, endID int) (result []*model.Question, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, startID)
	params = append(params, endID)
	generateSQL.WriteString("SELECT * FROM question WHERE id BETWEEN ? AND ? ORDER BY id ")

	var executeSQL *gorm.DB
	executeSQL = q.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (q questionDo) Debug() IQuestionDo {
	return q.withDO(q.DO.Debug())
}

func (q questionDo) WithContext(ctx context.Context) IQuestionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionDo) ReadDB() IQuestionDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionDo) WriteDB() IQuestionDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionDo) Session(config *gorm.Session) IQuestionDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionDo) Clauses(conds ...clause.Expression) IQuestionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionDo) Returning(value interface{}, columns ...string) IQuestionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionDo) Not(conds ...gen.Condition) IQuestionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionDo) Or(conds ...gen.Condition) IQuestionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionDo) Select(conds ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionDo) Where(conds ...gen.Condition) IQuestionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionDo) Order(conds ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionDo) Distinct(cols ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionDo) Omit(cols ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionDo) Join(table schema.Tabler, on ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionDo) Group(cols ...field.Expr) IQuestionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionDo) Having(conds ...gen.Condition) IQuestionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionDo) Limit(limit int) IQuestionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionDo) Offset(offset int) IQuestionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionDo) Unscoped() IQuestionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionDo) Create(values ...*model.Question) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionDo) CreateInBatches(values []*model.Question, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionDo) Save(values ...*model.Question) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionDo) First() (*model.Question, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Question), nil
	}
}

func (q questionDo) Take() (*model.Question, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Question), nil
	}
}

func (q questionDo) Last() (*model.Question, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Question), nil
	}
}

func (q questionDo) Find() ([]*model.Question, error) {
	result, err := q.DO.Find()
	return result.([]*model.Question), err
}

func (q questionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Question, err error) {
	buf := make([]*model.Question, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionDo) FindInBatches(result *[]*model.Question, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionDo) Attrs(attrs ...field.AssignExpr) IQuestionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionDo) Assign(attrs ...field.AssignExpr) IQuestionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionDo) Joins(fields ...field.RelationField) IQuestionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionDo) Preload(fields ...field.RelationField) IQuestionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionDo) FirstOrInit() (*model.Question, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Question), nil
	}
}

func (q questionDo) FirstOrCreate() (*model.Question, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Question), nil
	}
}

func (q questionDo) FindByPage(offset int, limit int) (result []*model.Question, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionDo) Delete(models ...*model.Question) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionDo) withDO(do gen.Dao) *questionDo {
	q.DO = *do.(*gen.DO)
	return q
}
